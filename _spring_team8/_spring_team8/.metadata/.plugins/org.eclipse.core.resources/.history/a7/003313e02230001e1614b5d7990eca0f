package com.markup.www.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.markup.www.domain.BoardUserDTO;
import com.markup.www.domain.BoardVO;
import com.markup.www.domain.PagingVO;
import com.markup.www.domain.UserVO;
import com.markup.www.repository.UserDAO;
import com.markup.www.service.BoardService;
import com.markup.www.service.UserService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/member/*")
@Controller
public class UserController {
	
	@Inject
	private UserService usv;
	
	@Inject
	private UserDAO udao;
	
	@Inject
	private BoardService bsv;
	
	@PostMapping("/login")
	public String userLogin(Model m, String id, String pw, HttpServletRequest request) {
		log.info(">>> id : "+id+", pw : "+pw);
		//파라미터로 받은 id, pw를 DB에 넘겨 일치하는 객체를 받음
		UserVO isUser= usv.isUser(id, pw);
		log.info(">>>isUser "+isUser);
		
		//DB에서 얻은 객체가 null이 아니라면 세션 연결 저장
		if(isUser != null) {
			HttpSession ses = request.getSession(); //세션 불러오기 위해서 request 객체가 필요함
			ses.setAttribute("ses", isUser); //세션에 객체 담기
			//ses.setMaxInactiveInterval(60); //로그인 유지시간
			m.addAttribute("user",isUser);
			m.addAttribute("msg_login",1);
			return "redirect:/board/list";
		}else {
			m.addAttribute("msg_login", 2);
			return "home";
		}
		
	}
	
	@GetMapping("/join")
	public String joinPage() {
		return "/user/join";
	}

	@GetMapping(value="/{id}", produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> remove(@PathVariable("id")String id){
		log.info(">>> id "+id);
		UserVO uvo=usv.duplicateCheck(id);
		if(uvo==null) {
			return new ResponseEntity<String>("1",HttpStatus.OK);
		}else {
			return new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
	}

	
	@PostMapping("/join")
	public String userJoin(@RequestParam("img") MultipartFile imgFile, UserVO uvo, Model m ) throws IOException {
		String uploadDirectory = "D:\\_spring_workspace\\_spring_team8\\file\\profile\\"; 
	        // 파일 이름 설정
	        String fileName = imgFile.getOriginalFilename();
	        log.info(">>> img "+imgFile.getOriginalFilename());
	        
	        // 파일을 지정된 경로로 저장
	        String filePath = uploadDirectory + fileName;
	        File destinationFile = new File(filePath);
	        imgFile.transferTo(destinationFile);
	        uvo.setImgFile(imgFile.getOriginalFilename());
	        log.info(">>> uvo : "+uvo);
	        
	        
	        // 파일 저장 성공
	        log.info("파일이 성공적으로 저장되었습니다.");
	      
	        
	        // 나머지 로직을 수행하세요
	        int isOk = usv.join(uvo);
	        if (isOk > 0) {
	            m.addAttribute("msvg_signup", 1);
	        } else {
	            m.addAttribute("msvg_signup", 0);
	        }
	        
	        return "home";

	}
	
	@GetMapping("/mypage")
	public String getDetail(Model m, @RequestParam("id") String id,PagingVO pgvo) {
		//리턴값이 없으면 왔던 곳으로 다시 돌아감
		log.info(">>> id > "+id);
		UserVO uvo=udao.getUser(id);
		log.info(">>> "+uvo);
		m.addAttribute("uvo", uvo);

		log.info(pgvo.toString());
		pgvo.setKeyword(id);
		pgvo.setQty(12);
		List<BoardUserDTO> likelist = bsv.getlikeList(pgvo);
		List<BoardUserDTO> postlist = bsv.getpostList(pgvo);
		m.addAttribute("likelist", likelist);
		m.addAttribute("postlist", postlist);
		m.addAttribute("word", pgvo.getKeyword());
		String taglist[]=uvo.getUtag().split(",");
		return "/user/mypage";
		
	}
	
	@GetMapping("/logout")
	public String logout(Model m, HttpServletRequest request) {
		request.getSession().removeAttribute("ses");
		request.getSession().invalidate(); //세션끊기
		m.addAttribute("msg_logout", 1);
		return "home";
	}
	
	@GetMapping("/modify")
	public String getDetail2(Model m, @RequestParam("id") String id) {
		//리턴값이 없으면 왔던 곳으로 다시 돌아감
		log.info(">>> id > "+id);
		UserVO uvo=udao.getUser(id);
		log.info(">>> "+uvo);
		m.addAttribute("uvo", uvo);
		return "/user/modify";
		
	}
	
	@GetMapping("/certify")
	public String certifyPage() {
		return "/user/certify";
	}
	
	@PostMapping(value = "/certify", consumes = "application/json",
			produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> post(@RequestBody UserVO uvo, Model m, HttpServletRequest r){
		log.info(">>> uvo : "+uvo);
		UserVO tmpUser=usv.isUser(uvo.getId(), uvo.getPw());
		if(tmpUser != null) {
			m.addAttribute("user",tmpUser);
			m.addAttribute("msg_login",1);
		}else {
			m.addAttribute("msg_login", 0);
		}
		int isOk=tmpUser!=null ? 1:0;
//		if(isOk>0) {
//			r.getSession().removeAttribute("ses");
//			r.getSession().invalidate();
//		}
		//리턴을 위해서는 response의 통신상태를 같이 리턴
		return isOk >0? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	@PostMapping("/modify")
	public String userModify(@RequestParam("img") MultipartFile img_File, UserVO uvo, Model m, RedirectAttributes rAttr) throws IOException {
	    
	    // 파일을 저장할 경로 설정
	    String uploadDirectory = "D:\\_spring_workspace\\_spring_team8\\file\\profile\\"; 
	    
	    if(img_File != null && !img_File.isEmpty()) {
	    	// 파일 이름 설정
	    	String fileName = img_File.getOriginalFilename();
	    	
	    	// 파일을 지정된 경로로 저장
	    	String filePath = uploadDirectory + fileName;
	    	File destinationFile = new File(filePath);
	    	img_File.transferTo(destinationFile);
	    	uvo.setImgFile(img_File.getOriginalFilename());
	    	
	    	// 파일 저장 성공
	    	log.info("파일이 성공적으로 저장되었습니다.");
	    	
	    }else {
	    	UserVO tmpuser=udao.getUser(uvo.getId());
	    	uvo.setImgFile(tmpuser.getImgFile());
	    }
	        
	    log.info(">>> " + uvo + ">>>file ");
	        // 나머지 로직을 수행하세요
	        int isOk = usv.modify(uvo);
	        if (isOk > 0) {
	            m.addAttribute("msvg_signup", 1);
	        } else {
	            m.addAttribute("msvg_signup", 0);
	        }
	        
	        rAttr.addFlashAttribute("isOk", isOk);
			return "redirect:/member/mypage?id="+uvo.getId();

	}

	
	@PutMapping(value="/", consumes = "application/json", produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> editPassword( @RequestBody UserVO uvo){
		log.info(">>> edit uvo "+uvo);
		
		int isOk=usv.update(uvo);
		return isOk>0 ? new ResponseEntity<String>("1",HttpStatus.OK) : new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@GetMapping("/follow")
	public String followPage(Model m) {
		List<UserVO>list=new ArrayList<UserVO>();
		list=usv.getList();
		m.addAttribute("list", list);
		
		return "/user/follow";
	}
	
	@PostMapping(value = "/follow", consumes = "application/json",
			produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> post(@RequestBody UserVO uvo){
		log.info(">>> "+uvo.getFollowing()+">>>"+uvo.getFollower());
		int isOk=usv.follow(uvo);
		//리턴을 위해서는 response의 통신상태를 같이 리턴
		return isOk >0? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@GetMapping(value="/followinglist/{id}", produces= {MediaType.APPLICATION_JSON_VALUE})
	public ResponseEntity<List<UserVO>> spreadFollowing(@PathVariable("id")String id){
		log.info(">>>followinglist id  "+id);
		//DB 요청
		List<UserVO> list = udao.getList();
		log.info(">>> 팔로잉 리스트"+list);
		return new ResponseEntity<List<UserVO>>(list,HttpStatus.OK);
	}
	
	@GetMapping(value="/followerlist/{id}", produces= {MediaType.APPLICATION_JSON_VALUE})
	public ResponseEntity<List<UserVO>> spreadFollower(@PathVariable("id")String id){
		log.info(">>>followinglist id  "+id);
		//DB 요청
		List<UserVO> list = udao.getList();
		log.info(">>> 팔로워리스트"+list);
		return new ResponseEntity<List<UserVO>>(list,HttpStatus.OK);
	}
	
	@DeleteMapping(value="/", produces= {MediaType.APPLICATION_JSON_VALUE})
	public ResponseEntity<String> unfollow(@RequestBody UserVO uvo){
		log.info(">>>팔취하는사람"+uvo.getFollower());
		log.info(">>>"+uvo.getFollowing());
		uvo.setId(uvo.getFollower());
		String userid=uvo.getFollowing();
		UserVO unfollowUser=udao.getUser(uvo.getId());
		UserVO unfollowedUser=udao.getUser(userid);
		String following[];
		StringBuilder newfollowing = new StringBuilder();
		if(unfollowUser.getFollowing().contains(",")) {
			following=unfollowUser.getFollowing().split(",");
//		List<String>newfollowing=new ArrayList<String>();
			for (String str : following) {
				if (!str.equals(userid)) {
					newfollowing.append(str).append(",");
				}
			}
			// 제거된 마지막 쉼표(,) 제거
			if (newfollowing.length() > 0) {
				newfollowing.deleteCharAt(newfollowing.length() - 1);
			}
			uvo.setFollowing(newfollowing.toString());
		}else {
			uvo.setFollowing("");
		}
		String follower[];
		StringBuilder newfollower= new StringBuilder();
		if(unfollowedUser.getFollower().contains(",")) {
			follower=unfollowedUser.getFollower().split(",");
			for(String str:follower) {
				if(! str.equals(uvo.getId())) {
					newfollower.append(str).append(",");
				}
			}
			if (newfollower.length() > 0) {
				newfollower.deleteCharAt(newfollower.length() - 1);
			}
			uvo.setFollower(newfollower.toString());
		}else {
			uvo.setFollower("");
		}
		
		log.info(">>>팔로잉"+uvo.getFollowing());
		log.info(">>>팔로워"+uvo.getFollower());
		int isOk=usv.unfollowUser(uvo, userid);
		return isOk>0 ? new ResponseEntity<String>("1",HttpStatus.OK) :new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
		//return new ResponseEntity<String>("1",HttpStatus.OK) ;
	}
	
	@GetMapping("/userList")
	public String member(Model m, @RequestParam("isOK")int isOK) {
		List<UserVO> list = usv.getList();
		m.addAttribute("list", list);
		m.addAttribute("isOK",isOK);
		return "/manager/userList";
	}
	
	@GetMapping("/userremove")
	public String deleteuser(RedirectAttributes rAttr, @RequestParam("id") String id) {
		// DB상 delete => 유저 삭제
		log.info("sssssssssid > "+id);
		int isOK = usv.deleteuser(id);
		return "redirect:/member/userList?isOK="+isOK;			
	}
	

	@GetMapping("/nj")
	public String nj() {
		return "/user/njoin";		
	}

}
