package com.markup.www.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.markup.www.domain.BoardDTO;
import com.markup.www.domain.BoardUserDTO;
import com.markup.www.domain.BoardVO;
import com.markup.www.domain.FileVO;
import com.markup.www.domain.PagingVO;
import com.markup.www.domain.UserVO;
import com.markup.www.handler.FileHandler;
import com.markup.www.repository.UserDAO;
import com.markup.www.service.BoardService;
import com.markup.www.service.UserService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board/*")
public class BoardController {

	private static final Logger log = LoggerFactory.getLogger(BoardController.class);

	@Inject
	private BoardService bsv;

	@Inject
	private FileHandler fhd;
	
	@GetMapping("/register")
	public String registerGet() {
		return "/board/register";
	}

	@GetMapping("/list")
	public String golist(Model m, PagingVO pgvo) {
		log.info(pgvo.toString());
		List<BoardUserDTO> budto = new ArrayList<BoardUserDTO>();
		budto = bsv.getAllList(pgvo);
		log.info("갖고온 개수 : "+budto.size());
		
		m.addAttribute("alist", budto);
		m.addAttribute("keyword", pgvo.getKeyword());

		return "/board/list";
	}

	@GetMapping(value = "/glist/{pageNo}-{keyword}-{qty}", produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<List<BoardUserDTO>> getList(@PathVariable("pageNo") int pageNo,
			@PathVariable("keyword") String keyword, @PathVariable("qty") int qty) {
		log.info("BoardController : glist");
		log.info("keyword : "+keyword+", pageNo : "+pageNo+", qty : "+qty);
		PagingVO pgvo = new PagingVO();
		pgvo.setKeyword(keyword);
		pgvo.setPageNo(pageNo);
		pgvo.setQty(qty);
		List<BoardUserDTO> budto = bsv.getAllList(pgvo);
		return new ResponseEntity<List<BoardUserDTO>>(budto, HttpStatus.OK); // 안 가는 경우가 없으니 OK만 써도 됨
	}
	

	@PutMapping(value = "/likeToggle/{bno}/{pushId}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> likeUp(@PathVariable("bno") int bno, @PathVariable("pushId") String id) {

		String oldlikeUser = bsv.getBoardLike(bno); // likeUser 변수
		String[] substrings;
		ArrayList<String> array = new ArrayList<>();

		if (oldlikeUser != null) {
			substrings = oldlikeUser.split("#", -1);
			array = new ArrayList<>(Arrays.asList(substrings));
			if (!array.isEmpty() && array.get(0).isEmpty()) {
				array.remove(0);
			}
		}

		if (array.contains(id)) {
			array.remove(id);
		} else {
			array.add(id);
		}

		StringBuilder builder = new StringBuilder();
		int likeCount = 0;
		for (String element : array) {
			builder.append("#").append(element);
			likeCount++;
		}
		String newLikeUser = builder.toString();
		log.info(newLikeUser);
		BoardVO bvo = new BoardVO();
		bvo.setLikeUser(newLikeUser);
		bvo.setBno(bno);

		int isOk = bsv.updateLikeUser(bvo);

		if (isOk <= 0) {
			return new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return new ResponseEntity<String>(String.valueOf(likeCount), HttpStatus.OK);
	}

	@GetMapping("/poplist")
	public String poplist(Model m, PagingVO pgvo) {
		LocalDate currentDate = LocalDate.now();
		LocalDate oneMonthAgo = currentDate.minusMonths(1);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		String oneMonthAgoString = oneMonthAgo.format(formatter);
		pgvo.setDate(oneMonthAgoString);

		List<BoardUserDTO> budto = new ArrayList<BoardUserDTO>();
		budto = bsv.getPopList(pgvo);
		
		Comparator<BoardUserDTO> comparator = Comparator.comparingInt(dto -> dto.getBvo().getLikeCount());
		Collections.sort(budto, comparator.reversed());
		
		m.addAttribute("alist", budto);
		return "/board/poplist";
	}

	@PostMapping("/register")
	public String registerPost(BoardVO bvo, RedirectAttributes rAttr,
			@RequestParam(name = "files", required = false) MultipartFile[] files) {
		log.info(bvo.toString());
		if (bvo.getBtag().length() > 0) {
			log.info("★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★b_tag :" + bvo.getBtag());
			String[] str = bvo.getBtag().split(",");
			ArrayList<String> tagList = new ArrayList<String>();
			String result = "";
			for (String tag : str) {
				tagList.add(tag.substring(tag.indexOf(":") + 2, tag.lastIndexOf("\"")));
				result = result.concat(tag.substring(tag.indexOf(":") + 2, tag.lastIndexOf("\"")));
			}
			bvo.setBtag(result);
		}
		log.info(">>> bvo " + bvo);
		log.info(">>> files " + files);

		List<FileVO> fList = null;
		// file 처리 handler로 처리
		if (files[0].getSize() > 0) { // 데이터가 있다 라는 것을 의미
			// 파일 배열을 경로설정, fvo set 다 해서 리스트로 리턴
			fList = fhd.uploadFiles(files);
		} else {
			log.info("file null");
		}
		// 파일과 보드 처리를 별도로 할것인지 같이 (묶어 처리=> 일반적)
		BoardDTO bdto = new BoardDTO(bvo, fList);
		int isOk = bsv.register(bdto);

		log.info(">> board register >>" + (isOk > 0 ? "OK" : "FAIL"));
		rAttr.addFlashAttribute("isOk", isOk);

		return "redirect:/board/list";
	}

	@GetMapping({ "/detail", "/modify" })
	public void detail(Model m, @RequestParam("bno") int bno, HttpServletRequest r, PagingVO pgvo) {
		log.info(">>>bno " + bno);
		log.info(">> mapping " + r.getRequestURI());
		String mapping = r.getRequestURI();
		String path = mapping.substring(mapping.lastIndexOf("/") + 1);
		log.info(">>>path " + path);

		BoardDTO bdto = bsv.getDetailFile(bno);
		String taglist[]=bdto.getBvo().getBtag().split("#");
		String keyword;
		for(String tmp : taglist) {
			keyword+=tmp+" ";
		}
		log.info(keyword);
		pgvo.setKeyword(keyword);
		
		m.addAttribute("boardDTO", bdto);
		m.addAttribute("fList", bdto.getFList());
		
	}

	@PostMapping("/modify")
	public String update(RedirectAttributes rAttr, BoardVO bvo,
	    @RequestParam(name = "files", required = false) MultipartFile[] files) {
	    if (bvo.getBtag().length() > 0) {
	        String[] str = bvo.getBtag().split(",");
	        ArrayList<String> tagList = new ArrayList<String>();

	        String result = "";
	        for (String tag : str) {
	            log.info("tag >>>>>>> " + tag.substring(tag.indexOf(":") + 2, tag.lastIndexOf("\"")));
	            tagList.add(tag.substring(tag.indexOf(":") + 2, tag.lastIndexOf("\"")));
	            result = result.concat(tag.substring(tag.indexOf(":") + 2, tag.lastIndexOf("\"")));
	        }

	        bvo.setBtag(result);
	    }

	    List<FileVO> flist = null;

	    if (files[0].getSize() > 0) {
	        flist = fhd.uploadFiles(files);
	    }

	    BoardDTO bdto = new BoardDTO(bvo, flist);
	    int isOk = bsv.modifyFile(bdto);
	    rAttr.addFlashAttribute("msg_modify", isOk > 0 ? "1" : "0");

	    return "redirect:/board/list";
	}
	
	@DeleteMapping(value="/file/{uuid}", produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		log.info(">>>> uuid : "+uuid);
		return bsv.removeFile(uuid) > 0 ?
				new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@GetMapping("/delete")
	public String delete(RedirectAttributes rAttr, @RequestParam("bno") int bno) {
		// DB상 update하기 isDel = "Y" => 삭제한글 처리
		int isOk = bsv.remove(bno);
		log.info(">>> isOk " + (isOk > 0 ? "OK" : "FAIL"));
		return "redirect:/board/list";
	}

	@GetMapping("/black")
	public String black(Model m) {
		List<BoardVO> list = bsv.getblackList();
		m.addAttribute("list", list);
		return "/manager/blacklist";
	}

	@GetMapping("/restore")
	public String restore(RedirectAttributes rAttr, @RequestParam("bno") int bno) {
		// DB상 update하기 isDel = 0 => 삭제한글 복구
		int isOk = bsv.restore(bno);
		log.info(">>> isOk 복구 " + (isOk > 0 ? "OK" : "FAIL"));
		return "redirect:/board/black";
	}
	
	@GetMapping(value = "/likelist/{pageNo}-{keyword}", produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<List<BoardUserDTO>> getlikeList(@PathVariable("pageNo") int pageNo,
			@PathVariable("keyword") String keyword) {
		log.info("BoardController : getlikeList");
		PagingVO pgvo = new PagingVO();
		pgvo.setPageNo(pageNo);
		pgvo.setQty(12);// 새로고침시 가져올 board개수
		pgvo.setKeyword(keyword);
		List<BoardUserDTO> likelist = bsv.getlikeList(pgvo);
		 
		log.info(">>> likelist"+likelist);
		return new ResponseEntity<List<BoardUserDTO>>(likelist, HttpStatus.OK); // 안 가는 경우가 없으니 OK만 써도 됨
		

	}
	
	@GetMapping(value = "/postlist/{pageNo}-{keyword}", produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<List<BoardUserDTO>> getPostList(@PathVariable("pageNo") int pageNo,
			@PathVariable("keyword") String keyword) {
		log.info("BoardController : getList");
		PagingVO pgvo = new PagingVO();
		pgvo.setPageNo(pageNo);
		pgvo.setQty(12);// 새로고침시 가져올 board개수
		pgvo.setKeyword(keyword);
		List<BoardUserDTO> postlist = bsv.getpostList(pgvo);
		
		log.info(">>> postlist"+postlist);
		return new ResponseEntity<List<BoardUserDTO>>(postlist, HttpStatus.OK); // 안 가는 경우가 없으니 OK만 써도 됨
	}

	@GetMapping("/patch")
	public String patch() {
		log.info("BoardController : patch");
		return "/board/patch";
	}
}
	
//	@PostMapping(value = "/listBlackPlus/{bno}", produces= {MediaType.APPLICATION_JSON_VALUE} )
//	public String listBlackPlus(@PathVariable("bno") int bno) {
//		log.info(">>>> bno : "+bno);
//		return bsv.listBlackPlus(bno) > 0 ?
//				new ResponseEntity<String>("1", HttpStatus.OK)
//				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
//	}
//
//}
